#include <iostream>
#define EXEMPT 4050

//Person structure on which tax will be calculated
struct person{
   double income;              //Yearly income
   int dependants;             // Dependants on tax
   int married;                //0 if single, 1 if married and filing joint, 2 if head of household
   double f_401k;              // double amount of 401k contributions
   double deductions;          //double value of approved itemized deductions
};

//Prototypes
double getRate(double income, int married);
person *Pers_new(double income, int dependents, int married, double deductions, double f401k);
double calculate(struct person* pers1);

//Main function
int main() {
   //Member variables that will be used to make new person object (struct)
   double income;
   int married;
   int dependants;
   double deductions;
   double f401;

         // Project Header
   for (int i=0; i<20; i++){
       printf("-");
   }
   printf("Tax Calculator");
   for (int i=0; i<20; i++){
       printf("-");
   }
   puts("\nby Utkarsh Sharma and Pranika Bedi\n");

       //Prints welcome message to stdout
   printf("Welcome! Calculating your Federal personal income tax will be quick and easy so long as you have the following information at hand:\n\n");
   puts("   * Please double check this information for accuracy! We are not responsible for incorrect tax calculations due to erroneous inputs * \n");
   puts("\t1. Yearly Income (Unadjusted)");
   puts("\t2. Marital Status");
   puts("\t3. Number of Dependants (if any)");
   puts("\t4. Itemized Deductions (if any)");
   puts("\t5. Yearly contributions to 401k and IRA (if any)");
   for (int (i) = 0; (i) <50; ++(i)) {
       printf("-");
   }
   puts("");

   //1. GETS INPUT FROM USER

                //Asks user for income from std input, stores value and prints
   puts("1. Please enter your yearly(unadjusted) income in dollars: \n");
   scanf("%lf", &income);
   printf("\t\tEntered yearly income is $%.02lf\n", income);

                //Asks user for filing status from std input, stores value and prints
   puts("\n2. Please enter your filing status as follows:");
   puts("\t Enter 1 if single");
   puts("\t Enter 2 if married and filing jointly");
   puts("\t Enter 3 if filing as head of household");
   puts("");
   scanf("%d", &married);
   printf("\t\tEntered filing is status is #%d", married);
   puts("");

               //Asks user for number of dependants and prints and stores the value
   puts("\n3. Please enter the number of dependants you are filing for:");
   scanf("%d", &dependants);
   printf("\t\t Number of dependents entered is: %d\n", dependants);

               //Asks user for itemized deductions
   puts("\n4. Please enter the total value of your approved itemized deductions");
   scanf("%lf", &deductions);
   printf("\t\tTotal value of deductions: $%.02lf\n", deductions);

               //Asks user for amount invested in 401k and IRA and passes to variable
   puts("\n5. Please enter your contributions to 401k and IRA (if any)");
   scanf("%lf", &f401);
   printf("\tEntered contributions were : $%.02lf\n\n", f401);

       //divider
   for (int j = 0; j < 49; ++j) {
       printf("-");
   }

   //2. CREATES PERSON STRUCT IN MEMORY WITH USER INPUTTED MEMBER VARIABLES
  struct person* bob= Pers_new(income, dependants, married, deductions, f401);

   //3. CALCULATES TOTAL TAX OF PERSON USING CALCULATE() AND GETRATE()
   printf("\n|Your estimated federal income tax is $%.02lf|\n" ,calculate(bob));          //Calculates dollar amount and prints to standard output

   for (int j = 0; j < 49; ++j) {                                                         //Divider
       printf("-");
   }

   puts("\n\n\nThank you for using this personal income tax calculator created by Utkarsh Sharma and Pranki Bedi ");   //End note

}

//Returns the tax rate calculated from the two passed attributes
double getRate(double income, int married){

   double taxRates[]={ .1, .15 , .25, .28, .33, .35, .396};        //Federal Tax brackets and rates

   //Federal Tax Rates if filing as single
   if(married==1){
       if(income < 9275)
           return taxRates[0];
       else if (income>=9275 && income<37650)
           return taxRates[1];
       else if (income>=37650 && income<91150)
           return taxRates[2];
       else if (income>=91150 && income<190150)
           return taxRates[3];
       else if (income>=190150 && income<413350)
           return taxRates[4];
       else if (income>=413350 && income<415050)
           return taxRates[5];
       else if (income>=415050)
           return taxRates[6];
   }

   //Returns applicable tax rate when filing as married joint
   else if(married==2){
       if(income < 18550)
           return taxRates[0];
       else if (income>=18550 && income<75300)
           return taxRates[1];
       else if (income>=75300 && income<151900)
           return taxRates[2];
       else if (income>=151900 && income<231450)
           return taxRates[3];
       else if (income>=231450 && income<413350)
           return taxRates[4];
       else if (income>=413350 && income<466950)
           return taxRates[5];
       else if (income>=466950)
           return taxRates[6];
   }

   //Returns applicable tax rate when filing as head of household
   else if(married==3){
       if(income < 13250)
           return taxRates[0];
       else if (income>=13250 && income<50400)
           return taxRates[1];
       else if (income>=50400 && income<130150)
           return taxRates[2];
       else if (income>=130150 && income<210800)
           return taxRates[3];
       else if (income>=210800 && income<413350)
           return taxRates[4];
       else if (income>=413350 && income<441000)
           return taxRates[5];
       else if (income>=441000)
           return taxRates[6];
   }

   //Return 0 and error message if income is not within range or married variable is out of bounds
  puts("\nERROR: Check married status and income inputs\n");
   return 0;
}

// Function to create new person struct with passed attributes
person *Pers_new(double income,  int dependents,  int married, double deductions, double f401k){
   struct person * p = (person*)malloc(sizeof(person));        //Allocate memory the size of a person struct(efficiently create new person struct)
   p->f_401k= f401k;
   p->dependants= dependents;                                   // Set value of new person P to passed dependent attribute
   p->income= income;                                           // Sets value of person.income to passed values
   p->deductions= deductions;                                   //passes deduction value to instance of P
   p->married= married;                                         // Sets value of person.married to passed attribute
   return p;
}

// Function that calculates dollar amount of tax by using member variables of passed person struct
double calculate(struct person* pers1){

   int standardDeduction[]={6300, 12600, 9300};    //Standard deduction values taken from government website
   double total= pers1->income;                    // Member Variable to keep track of total tax amount

   //total taxable income calculations  (Calculate Adjusted Gross Income, deductions, and exemptions)

       //take highest of standard deduction or approved deductions inputted by user
   if (pers1->deductions < standardDeduction[((pers1->married) -1)]){
       pers1->deductions=standardDeduction[((pers1->married)-1)];
}

       //calculates taxable income (yearly income - 401K contributions- approved itemized deductions - ((dependants + 1(for yourself))* federal personal exemption))
   total= total - pers1->f_401k -pers1->deductions - ((pers1->dependants + 1) *EXEMPT);

    //use taxable income to calculate tax
   total= total * getRate(pers1->income, pers1->married);

    //Unfortunately the government does not pay you, so return 0 as tax if the value is negative
   if (total<0){
       return 0;
   }

   return total;

}
